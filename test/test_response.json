[
  {
    "rendered_body": "省略",
    "body": "# 目的\nペアリング時にPINコードの入力が必要となる場合において、プログラム的に (ユーザによる手入力なしで) Bluetoothのペアリングを行う方法をここにメモしたいと思います。\n\n# 概要\n大まかに書くと以下の手順を行うこととなります。\n\n1. NFCやUSBなどを経由して、周辺機器のBDアドレス (MACアドレス) とPINコードを受信する。\n2. BDアドレスより、その周辺機器の `BluetoothDevice` を生成する。\n3. `BluetoothDevice.ACTION_PAIRING_REQUEST` を受信するBroadcastReceiverを登録する。\n4. `BluetoothDevice#createBond()` によってペアリング要求を行う。\n5. `BluetoothDevice#setPin()` によってPINコードを入力する。\n\n# 手順\nそれでは各手順ごとに説明していきます。\n\n## 1. 周辺機器のBDアドレスとPINコードを受信\nまず最初にペアリングを行いたい周辺機器のPINコード (とBDアドレス) を手に入れるところから始めます。\nこれを行う手段に決まりはないのですが、大抵はNFC経由で行われると思います。\nこの手順に関してはここでは詳しくは触れません。  \n(もしくは機器によってはPINコード入力を促されるものの、コードが固定の値 (`0000` や `1234`) である場合があるかもしれません。)\n\n## 2. 周辺機器のBluetoothDeviceを取得\n使用しているライブラリによって手順は異なるとは思いますが、先程の手順で取得したBDアドレス (MACアドレス) を元に `BluetoothDevice` のインスタンスを取得します。\n\nAndroidの標準ライブラリを使っている場合は\n`BluetoothAdapter#getRemoteDevice(address: String): BluetoothDevice`\nを使えばいいかと思います。  \n[RxAndroidBle](https://github.com/Polidea/RxAndroidBle)を使っている場合は\n`RxBleClient#getBleDevice(macAddress: String): RxBleDevice`\n→ `RxBleDevice#getBluetoothDevice(): BluetoothDevice`\nで取得できます。\n\nまた、周辺機器のBDアドレス (MACアドレス) がない場合は、スキャンを掛けるなりして `BluetoothDevice` を取得してください。\n\n## 3. BroadcastReceiverの登録\nBluetoothのペアリング要求が行われた際に `BluetoothDevice.ACTION_PAIRING_REQUEST` のメッセージを飛んで来るので、これを購読するBroadcastReceiverを登録します。\n\nどのように実装してもいいのですが、私は以下のようにしました。\n\n```Kotlin\npackage net.aridai.pairingapp\n\nimport android.bluetooth.BluetoothDevice\nimport android.content.Intent\nimport android.content.IntentFilter\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport com.polidea.rxandroidble2.RxBleClient\nimport com.polidea.rxandroidble2.RxBleDevice\nimport kotlinx.android.synthetic.main.main_activity.*\nimport org.koin.android.ext.android.inject\n\n//  Activityのコードです。\n//  一部省略している部分があります。\nclass MainActivity : AppCompatActivity() {\n\n    //  私はRxAndroidBleを使っています。\n    private val bleClient: RxBleClient by inject()\n\n    //  IntentFilterの設定です。\n    //  優先度を最大の999 (SYSTEM_HIGH_PRIORITY - 1) にしています。\n    private val pairingRequestIntentFilter: IntentFilter by lazy {\n        IntentFilter(BluetoothDevice.ACTION_PAIRING_REQUEST).also {\n            it.priority = IntentFilter.SYSTEM_HIGH_PRIORITY - 1\n        }\n    }\n\n    //  BroadcastReceiverです。\n    //  「PairingBroadcastReceiver」は私が定義したクラスです。\n    private var pairingBroadcastReceiver: PairingBroadcastReceiver? = null\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        //  省略...\n    }\n\n    override fun onResume() {\n        super.onResume()\n\n        //  ここでBroadcastReceiverの登録を行っています。\n        this.pairingBroadcastReceiver = PairingBroadcastReceiver()\n        this.registerReceiver(this.pairingBroadcastReceiver, this.pairingRequestIntentFilter)\n    }\n\n    override fun onPause() {\n        super.onPause()\n\n        //  ここでBroadcastReceiverの登録解除を行っています。\n        this.unregisterReceiver(this.pairingBroadcastReceiver)\n        this.pairingBroadcastReceiver = null\n    }\n\n    //  ペアリングを行います。\n    private fun pair(address: String, pin: ByteArray) {\n        //  私はRxAndroidBleを使っているのでこのように書きます。\n        val bluetoothDevice = this.bleClient.getBleDevice(address).bluetoothDevice\n        bluetoothDevice.createBond()\n\n        //  Android標準ライブラリで行う場合は BluetoothAdapter#getRemoteDevice(address) を使うといいかと思います。\n    }\n}\n\n```\n\n## 4. ペアリングの要求\n上記のコードの以下の部分です。  \n`BluetoothDevice` を取得して `createBond()` を呼んでいます。\n\n```Kotlin\n//  RxAndroidBleを使っている場合\nprivate fun pair(address: String, pin: ByteArray) {\n    this.pairingBroadcastReceiver!!.pin = pin\n    val bluetoothDevice = this.bleClient.getBleDevice(address).bluetoothDevice\n    bluetoothDevice.createBond()\n}\n```\n\n```Kotlin\n//  Android標準でやる場合\n//  (this.adapter: BluetoothAdapter)\nprivate fun pair(address: String, pin: ByteArray) {\n    this.pairingBroadcastReceiver!!.pin = pin\n    val bluetoothDevice = this.adapter.getRemoteDevice(address)\n    bluetoothDevice.createBond()\n}\n```\n\n## 5. PINコードの入力\n正常にペアリング要求がされた場合、BroadcastReceiverがメッセージを受信しますので、そこでPINコードをプログラム的に入力します。\n\n```Kotlin\npackage net.aridai.pairingapp\n\nimport android.bluetooth.BluetoothDevice\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.Intent\n\nclass PairingBroadcastReceiver : BroadcastReceiver() {\n\n    //  PINコードの受け渡し口\n    //  (サンプルコードなので雑でも気にしないでね♡)\n    var pin: ByteArray? = null\n\n    override fun onReceive(context: Context?, intent: Intent?) {\n        if (intent == null) return\n\n        if (intent.action == BluetoothDevice.ACTION_PAIRING_REQUEST) {\n            val device = intent.getParcelableExtra\u003cBluetoothDevice\u003e(BluetoothDevice.EXTRA_DEVICE)!!\n            val pin = this.pin!!\n\n            device.setPin(pin)\n\n            //  他のBroadcastReceiverにメッセージが飛んでいかなないようにする。\n            //  これを呼ばないとシステムのペアリング要求通知が出てきてしまう。\n            this.abortBroadcast()\n        }\n    }\n}\n\n```\n\nコード中で `BroadcastReceiver#abortBroadcast()` を呼んでいますが、これを呼ばないとAndroidのシステムの通知が出てきてしまいます。 \n\n![ペアリング通知.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/341119/6f4bbed3-ef0b-f1e2-169c-0ae17ab9b1f4.png)\n\nまた、PINコードの受け渡しに `PairingBroadcastReceiver#pin` をActivity側からセットさせてやっていますが、実際にはもっとちゃんとやりましょう。\n\n```kotlin\n//  ※ 例えばの実装例です。\n//  こんなインタフェースを切って、\ninterface PairingPinProvider {\n    fun providePin(address: String): ByteArray?\n}\n\n//  BroadcastReceiver購読元に実装させて、\nclass MainActivity : AppCompatActivity(), PairingPinProvider {\n    //  いろいろと省略...\n\n    override fun providePin(address: String): ByteArray? {\n        //  ちゃんと実装\n    }\n}\n\n//  特定のActivityじゃなくてインタフェースに依存させる。\noverride fun onReceive(context: Context?, intent: Intent?) {\n    if (context !is PairingPinProvider || intent == null) return\n    //  省略...\n    val pin = context.providePin(device.address) ?: throw IllegalStateException(\"ペアリング要求したくせにPINねぇじゃんww\")\n}\n```\n\n# その他\n\nペアリング (ボンディング) の状態が変更されたことを知るには `BluetoothDevice.ACTION_BOND_STATE_CHANGED` のBroadcastReceiverを使うといいでしょう。\n\n```Kotlin\npackage net.aridai.pairingapp\n\nimport android.bluetooth.BluetoothDevice\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.Intent\n\nclass BondStateChangedBroadcastReceiver : BroadcastReceiver() {\n\n    override fun onReceive(context: Context?, intent: Intent?) {\n        if (context !is BondStateChangedListener || intent == null) return\n\n        if (intent.action == BluetoothDevice.ACTION_BOND_STATE_CHANGED) {\n            val device = intent.getParcelableExtra\u003cBluetoothDevice\u003e(BluetoothDevice.EXTRA_DEVICE)!!\n            val prevBondState = intent.getIntExtra(BluetoothDevice.EXTRA_PREVIOUS_BOND_STATE, -1)\n            val bondState = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, -1)\n\n            context.onBondStateChanged(device, prevBondState, bondState)\n        }\n    }\n\n    interface BondStateChangedListener {\n        fun onBondStateChanged(device: BluetoothDevice, prevState: Int, currentState: Int)\n    }\n}\n\n```\n\nまた `AndroidManifest.xml` にちゃんとパーミッションを書きましょう。\n\n```xml\n    \u003cuses-permission android:name=\"android.permission.BLUETOOTH\" /\u003e\n    \u003cuses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" /\u003e\n\n    \u003cuses-feature\n        android:name=\"android.hardware.bluetooth_le\"\n        android:required=\"true\" /\u003e\n```\n\n# 参考\n\n* [BluetoothDevice | Android Developers](https://developer.android.com/reference/android/bluetooth/BluetoothDevice)\n* [BluetoothAdapter | Android Developers](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(java.lang.String))\n* [android - Broadcast receiver highest priority not working - Stack Overflow](https://stackoverflow.com/a/27653789)\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2020-02-01T08:27:34+09:00",
    "group": null,
    "id": "cf9a7627c41bf7c13c80",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "bluetooth",
        "versions": []
      }
    ],
    "title": "【Android】プログラム的にBluetoothのペアリングを行う方法【Bluetooth】",
    "updated_at": "2020-02-01T11:56:34+09:00",
    "url": "https://qiita.com/aridai/items/cf9a7627c41bf7c13c80",
    "user": {
      "description": "AndroidとWPFを書く🐜です。\r\nKotlinかわいいよKotlin🐤",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 1,
      "github_login_name": null,
      "id": "aridai",
      "items_count": 1,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 341119,
      "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/341119/d45dcff0ceabdf78fa082d872fea08492157dbef/large.png?1581068618",
      "team_only": false,
      "twitter_screen_name": "aridai_net",
      "website_url": ""
    },
    "page_views_count": null
  }
]
